name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:

  compile:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Compile with Maven
      run: mvn compile

  security-check:
    runs-on: self-hosted
    needs: compile

    steps:
    - uses: actions/checkout@v4

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg lsb-release apt-transport-https
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Trivy File System Scan
      run: trivy fs --format json -o fs-report.json .

    - name: Install Gitleaks
      run: |
        curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep "browser_download_url.*linux_x64.tar.gz" | cut -d '"' -f 4 | wget -qi -
        tar -xvzf gitleaks*linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin

    - name: Gitleaks Secret Scan
      run: gitleaks detect --source . --report-format json --report-path gitleaks-report.json

  test:
    runs-on: self-hosted
    needs: security-check

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Run Unit Tests
      run: mvn test

  build_project_and_sonar_scan:
    runs-on: self-hosted
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build Project
      run: mvn package

    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

  build_docker_image_and_push:
    runs-on: self-hosted
    needs: build_project_and_sonar_scan

    steps:
    - uses: actions/checkout@v4

    - name: Download JAR Artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: sunilmargale/bankapp:latest
        file: ./Dockerfile

  deploy_to_kubernetes:
    runs-on: self-hosted
    needs: build_docker_image_and_push

    steps:
    - uses: actions/checkout@v4

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Deploy to EKS
      run: kubectl apply -f ds.yml
